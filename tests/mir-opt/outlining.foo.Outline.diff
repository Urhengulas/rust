- // MIR for `foo` before Outline
+ // MIR for `foo` after Outline
  
  fn foo(_1: impl Into<Bar>) -> () {
      debug x => _1;                       // in scope 0 at $DIR/outlining.rs:+0:8: +0:9
      let mut _0: ();                      // return place in scope 0 at $DIR/outlining.rs:+0:27: +0:27
      let mut _2: Bar;                     // in scope 0 at $DIR/outlining.rs:+1:9: +1:14
      let mut _3: impl Into<Bar>;          // in scope 0 at $DIR/outlining.rs:+1:22: +1:23
      let _4: ();                          // in scope 0 at $DIR/outlining.rs:+4:5: +4:13
      let mut _5: &mut Bar;                // in scope 0 at $DIR/outlining.rs:+4:5: +4:13
      scope 1 {
          debug x => _2;                   // in scope 1 at $DIR/outlining.rs:+1:9: +1:14
      }
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/outlining.rs:+1:9: +1:14
          StorageLive(_3);                 // scope 0 at $DIR/outlining.rs:+1:22: +1:23
          _3 = move _1;                    // scope 0 at $DIR/outlining.rs:+1:22: +1:23
+         StorageLive(_2);                 // scope 0 at $DIR/outlining.rs:+1:9: +1:14
          _2 = <impl Into<Bar> as Into<Bar>>::into(move _3) -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/outlining.rs:+1:22: +1:30
                                           // mir::Constant
                                           // + span: $DIR/outlining.rs:5:24: 5:28
                                           // + literal: Const { ty: fn(impl Into<Bar>) -> Bar {<impl Into<Bar> as Into<Bar>>::into}, val: Value(<ZST>) }
      }
  
      bb1: {
          StorageDead(_3);                 // scope 0 at $DIR/outlining.rs:+1:29: +1:30
          StorageLive(_4);                 // scope 1 at $DIR/outlining.rs:+4:5: +4:13
          StorageLive(_5);                 // scope 1 at $DIR/outlining.rs:+4:5: +4:13
          _5 = &mut _2;                    // scope 1 at $DIR/outlining.rs:+4:5: +4:13
          _4 = Bar::incr(move _5) -> [return: bb2, unwind: bb3]; // scope 1 at $DIR/outlining.rs:+4:5: +4:13
                                           // mir::Constant
                                           // + span: $DIR/outlining.rs:8:7: 8:11
                                           // + literal: Const { ty: for<'a> fn(&'a mut Bar) {Bar::incr}, val: Value(<ZST>) }
      }
  
      bb2: {
          StorageDead(_5);                 // scope 1 at $DIR/outlining.rs:+4:12: +4:13
          StorageDead(_4);                 // scope 1 at $DIR/outlining.rs:+4:13: +4:14
          _0 = const ();                   // scope 0 at $DIR/outlining.rs:+0:27: +5:2
          StorageDead(_2);                 // scope 0 at $DIR/outlining.rs:+5:1: +5:2
          return;                          // scope 0 at $DIR/outlining.rs:+5:2: +5:2
      }
  
      bb3 (cleanup): {
          resume;                          // scope 0 at $DIR/outlining.rs:+0:1: +5:2
      }
  }
  
